function render_workspace( work, hfname, cfname, embedded_flag, prefix )
%RENDER_WORKSPACE Write workspace to header file.

incFile = fopen(hfname, 'w');
srcFile = fopen(cfname, 'w');

% Add an include-guard statement
[~, fname, ~] = fileparts(hfname);
incGuard = [upper(fname), '_H'];
fprintf(incFile, '#ifndef %s\n',   incGuard);
fprintf(incFile, '#define %s\n\n', incGuard);

% Print comment headers containing the generation time into the files
daystr  = datestr(now, 'mmmm dd, yyyy');
timestr = datestr(now, 'HH:MM:SS');
fprintf(incFile, '/*\n');
fprintf(incFile, ' * This file was autogenerated by OSQP-Matlab on %s at %s.\n', daystr, timestr);
fprintf(incFile, ' * \n');
fprintf(incFile, ' * This file contains the prototypes for all the workspace variables needed\n');
fprintf(incFile, ' * by OSQP. The actual data is contained inside workspace.c.\n');
fprintf(incFile, ' */\n\n');

fprintf(srcFile, '/*\n');
fprintf(srcFile, ' * This file was autogenerated by OSQP-Matlab on %s at %s.\n', daystr, timestr);
fprintf(srcFile, ' * \n');
fprintf(srcFile, ' * This file contains the workspace variables needed by OSQP.\n');
fprintf(srcFile, ' */\n\n');


% Include types, constants and private header
fprintf(incFile, '#include \"types.h\"\n');
fprintf(incFile, '#include \"qdldl_interface.h\"\n\n');

fprintf(srcFile, '#include \"types.h\"\n');
fprintf(srcFile, '#include \"qdldl_interface.h\"\n\n');

% Write data structure
write_data_src(srcFile, work.data, embedded_flag, prefix);
write_data_inc(incFile, work.data, prefix);

% Write settings structure
write_settings_src(srcFile, work.settings, embedded_flag, prefix);
write_settings_inc(incFile, work.settings, embedded_flag, prefix);

% Write scaling structure
write_scaling_src(srcFile, work.scaling, prefix);
write_scaling_inc(incFile, work.scaling, prefix);

% Write linsys_solver structure
write_linsys_solver_src(srcFile, work.linsys_solver, embedded_flag, prefix);
write_linsys_solver_inc(incFile, work.linsys_solver, embedded_flag, prefix);

% Define empty solution structure
write_solution_src(srcFile, work.data.n, work.data.m, prefix);
write_solution_inc(incFile, work.data.n, work.data.m, prefix);

% Define info structure
write_info_src(srcFile, prefix);
write_info_inc(incFile, prefix);

% Define workspace structure
write_workspace_src(srcFile, work.data.n, work.data.m, work.rho_vectors, embedded_flag, prefix);
write_workspace_inc(incFile, work.data.n, work.data.m, work.rho_vectors, embedded_flag, prefix);

% The endif for the include-guard
fprintf(incFile, '#endif // ifndef %s\n', incGuard);

fclose(incFile);
fclose(srcFile);

end



function write_data_src( f, data, embedded_flag, prefix )
%WRITE_DATA_SRC Write data structure to file.

fprintf(f, '// Define data structure\n');

if embedded_flag
    % Define matrix P
    write_mat_const(f, data.P, strcat([prefix, 'Pdata']));

    % Define matrix A
    write_mat_const(f, data.A, strcat([prefix, 'Adata']));
else
    % Define matrix P
    write_mat(f, data.P, strcat([prefix, 'Pdata']));

    % Define matrix A
    write_mat(f, data.A, strcat([prefix, 'Adata']));
end

% Define other data vectors
write_vec(f, data.q, strcat([prefix, 'qdata']), 'c_float');
write_vec(f, data.l, strcat([prefix, 'ldata']), 'c_float');
write_vec(f, data.u, strcat([prefix, 'udata']), 'c_float');

% Define data structure
fprintf(f, strcat(['OSQPData ', prefix, 'data = {']));
fprintf(f, '%d, ', data.n);
fprintf(f, '%d, ', data.m);
fprintf(f, strcat(['&', prefix, 'Pdata, &', prefix, 'Adata, ', prefix, 'qdata, ', prefix, 'ldata, ', prefix, 'udata']));
fprintf(f, '};\n\n');

end

function write_data_inc( f, data, prefix )
%WRITE_DATA_INC Write data structure prototypes to file.

fprintf(f, '// Data structure prototypes\n');

% Define matrix P
write_mat_extern(f, data.P, strcat([prefix, 'Pdata']));

% Define matrix A
write_mat_extern(f, data.A, strcat([prefix, 'Adata']));

% Define other data vectors
write_vec_extern(f, data.q, strcat([prefix, 'qdata']), 'c_float');
write_vec_extern(f, data.l, strcat([prefix, 'ldata']), 'c_float');
write_vec_extern(f, data.u, strcat([prefix, 'udata']), 'c_float');

% Define data structure
fprintf(f, strcat(['extern OSQPData ', prefix, 'data;\n\n']));

end


function write_settings_src( f, settings, embedded_flag, prefix )
%WRITE_SETTINGS_SRC Write settings structure to file.

fprintf(f, '// Define settings structure\n');
fprintf(f, strcat(['OSQPSettings ', prefix, 'settings = {']));
fprintf(f, '(c_float)%.20f, ', settings.rho);
fprintf(f, '(c_float)%.20f, ', settings.sigma);
fprintf(f, '%d, ',             settings.scaling);

if embedded_flag ~= 1
    fprintf(f, '%d, ', settings.adaptive_rho);
    fprintf(f, '%d, ', settings.adaptive_rho_interval);
    fprintf(f, '(c_float)%.20f,', settings.adaptive_rho_tolerance);
end

fprintf(f, '%d, ',             settings.max_iter);
fprintf(f, '(c_float)%.20f, ', settings.eps_abs);
fprintf(f, '(c_float)%.20f, ', settings.eps_rel);
fprintf(f, '(c_float)%.20f, ', settings.eps_prim_inf);
fprintf(f, '(c_float)%.20f, ', settings.eps_dual_inf);
fprintf(f, '(c_float)%.20f, ', settings.alpha);
fprintf(f, '(enum linsys_solver_type) LINSYS_SOLVER, ');


fprintf(f, '%d, ', settings.scaled_termination);
fprintf(f, '%d, ', settings.check_termination);
fprintf(f, '%d, ', settings.warm_start);

fprintf(f, '};\n\n');

end

function write_settings_inc( f, settings, embedded_flag, prefix )
%WRITE_SETTINGS_INC Write prototype for settings structure to file.

fprintf(f, '// Settings structure prototype\n');
fprintf(f, strcat(['extern OSQPSettings ', prefix, 'settings;\n\n']));

end


function write_scaling_src( f, scaling, prefix )
%WRITE_SCALING_SRC Write scaling structure to file.

fprintf(f, '// Define scaling structure\n');

if ~isempty(scaling)
    write_vec(f, scaling.D,    strcat([prefix, 'Dscaling']),    'c_float');
    write_vec(f, scaling.Dinv, strcat([prefix, 'Dinvscaling']), 'c_float');
    write_vec(f, scaling.E,    strcat([prefix, 'Escaling']),    'c_float');
    write_vec(f, scaling.Einv, strcat([prefix, 'Einvscaling']), 'c_float');
    fprintf(f, strcat(['OSQPScaling ', prefix, 'scaling = {']));
    fprintf(f, '(c_float)%.20f, ', scaling.c);
    fprintf(f, strcat([prefix, 'Dscaling, ', prefix, 'Escaling, ']));
    fprintf(f, '(c_float)%.20f, ', scaling.cinv);
    fprintf(f, strcat([prefix, 'Dinvscaling, ', prefix, 'Einvscaling};\n\n']));
else
    fprintf(f, strcat(['OSQPScaling ', prefix, 'scaling;\n\n']));
end

end


function write_scaling_inc( f, scaling, prefix )
%WRITE_SCALING_INC Write prototypes for the scaling structure to file.

fprintf(f, '// Scaling structure prototypes\n');

if ~isempty(scaling)
    write_vec_extern(f, scaling.D,    strcat([prefix, 'Dscaling']),    'c_float');
    write_vec_extern(f, scaling.Dinv, strcat([prefix, 'Dinvscaling']), 'c_float');
    write_vec_extern(f, scaling.E,    strcat([prefix, 'Escaling']),    'c_float');
    write_vec_extern(f, scaling.Einv, strcat([prefix, 'Einvscaling']), 'c_float');
end

fprintf(f, strcat(['extern OSQPScaling ', prefix, 'scaling;\n\n']));


end

function write_linsys_solver_src( f, linsys_solver, embedded_flag, prefix )
%WRITE_LINSYS_SOLVER_SRC Write linsys_solver structure to file.

fprintf(f, '// Define linsys_solver structure\n');
write_mat(f, linsys_solver.L,             strcat([prefix, 'linsys_solver_L']))
write_vec(f, linsys_solver.Dinv,          strcat([prefix, 'linsys_solver_Dinv']),        'c_float')
write_vec(f, linsys_solver.P,             strcat([prefix, 'linsys_solver_P']),           'c_int')
fprintf(f, strcat(['c_float ', prefix, 'linsys_solver_bp[%d];\n']),  length(linsys_solver.bp));
fprintf(f, strcat(['c_float ', prefix, 'linsys_solver_sol[%d];\n']), length(linsys_solver.sol));
write_vec(f, linsys_solver.rho_inv_vec,   strcat([prefix, 'linsys_solver_rho_inv_vec']), 'c_float')

if embedded_flag ~= 1
    write_vec(f, linsys_solver.Pdiag_idx, strcat([prefix, 'linsys_solver_Pdiag_idx']),    'c_int');
    write_mat(f, linsys_solver.KKT,       strcat([prefix, 'linsys_solver_KKT']));
    write_vec(f, linsys_solver.PtoKKT,    strcat([prefix, 'linsys_solver_PtoKKT']),       'c_int');
    write_vec(f, linsys_solver.AtoKKT,    strcat([prefix, 'linsys_solver_AtoKKT']),       'c_int');
    write_vec(f, linsys_solver.rhotoKKT,  strcat([prefix, 'linsys_solver_rhotoKKT']),     'c_int');
    write_vec(f, linsys_solver.D,         strcat([prefix, 'linsys_solver_D']),            'QDLDL_float');
    write_vec(f, linsys_solver.etree,     strcat([prefix, 'linsys_solver_etree']),        'QDLDL_int');
    write_vec(f, linsys_solver.Lnz,       strcat([prefix, 'linsys_solver_Lnz']),          'QDLDL_int');
    fprintf(f, strcat(['QDLDL_int   ', prefix, 'linsys_solver_iwork[%d];\n']), length(linsys_solver.iwork));
    fprintf(f, strcat(['QDLDL_bool  ', prefix, 'linsys_solver_bwork[%d];\n']), length(linsys_solver.bwork));
    fprintf(f, strcat(['QDLDL_float ', prefix, 'linsys_solver_fwork[%d];\n']), length(linsys_solver.fwork));
end

fprintf(f, strcat(['qdldl_solver ', prefix, 'linsys_solver = ']));
fprintf(f, '{QDLDL_SOLVER, &solve_linsys_qdldl, ');

if embedded_flag ~= 1
    fprintf(f, strcat(['&update_linsys_solver_matrices_qdldl, &update_linsys_solver_rho_vec_qdldl, ']));
end

fprintf(f, strcat(['&', prefix, 'linsys_solver_L, ', prefix, 'linsys_solver_Dinv, ', prefix, 'linsys_solver_P, ', prefix, 'linsys_solver_bp, ', prefix, 'linsys_solver_sol, ', prefix, 'linsys_solver_rho_inv_vec, ']));
fprintf(f, '(c_float)%.20f, ',  linsys_solver.sigma);
fprintf(f, '%d, ',              linsys_solver.n);
fprintf(f, '%d, ',              linsys_solver.m);

if embedded_flag ~= 1
    fprintf(f, strcat(['', prefix, 'linsys_solver_Pdiag_idx, ']));
    fprintf(f, '%d, ',              linsys_solver.Pdiag_n);
    fprintf(f, strcat([['&', prefix, 'linsys_solver_KKT, ', prefix, 'linsys_solver_PtoKKT, ', prefix, 'linsys_solver_AtoKKT, ', prefix, 'linsys_solver_rhotoKKT, ', prefix, 'linsys_solver_D, ', prefix, 'linsys_solver_etree, ', prefix, 'linsys_solver_Lnz, ', prefix, 'linsys_solver_iwork, ', prefix, 'linsys_solver_bwork, ', prefix, 'linsys_solver_fwork, ']]));
end

fprintf(f, '};\n\n');

end


function write_linsys_solver_inc( f, linsys_solver, embedded_flag, prefix )
%WRITE_LINSYS_SOLVER_INC Write prototypes for linsys_solver structure to file.

fprintf(f, '// Prototypes for linsys_solver structure\n');
write_mat_extern(f, linsys_solver.L,            strcat([prefix, 'linsys_solver_L']))
write_vec_extern(f, linsys_solver.Dinv,         strcat([prefix, 'linsys_solver_Dinv']),        'c_float')
write_vec_extern(f, linsys_solver.P,            strcat([prefix, 'linsys_solver_P']),           'c_int')
fprintf(f, strcat(['extern c_float ', prefix, 'linsys_solver_bp[%d];\n']),  length(linsys_solver.bp));
fprintf(f, strcat(['extern c_float ', prefix, 'linsys_solver_sol[%d];\n']), length(linsys_solver.sol));
write_vec_extern(f, linsys_solver.rho_inv_vec,  strcat([prefix, 'linsys_solver_rho_inv_vec']), 'c_float')

if embedded_flag ~= 1
    write_vec_extern(f, linsys_solver.Pdiag_idx, strcat([prefix, 'linsys_solver_Pdiag_idx']),  'c_int');
    write_mat_extern(f, linsys_solver.KKT,       strcat([prefix, 'linsys_solver_KKT']));
    write_vec_extern(f, linsys_solver.PtoKKT,    strcat([prefix, 'linsys_solver_PtoKKT']),     'c_int');
    write_vec_extern(f, linsys_solver.AtoKKT,    strcat([prefix, 'linsys_solver_AtoKKT']),     'c_int');
    write_vec_extern(f, linsys_solver.rhotoKKT,  strcat([prefix, 'linsys_solver_rhotoKKT']),   'c_int');
    write_vec_extern(f, linsys_solver.D,         strcat([prefix, 'linsys_solver_D']),          'QDLDL_float');
    write_vec_extern(f, linsys_solver.etree,     strcat([prefix, 'linsys_solver_etree']),      'QDLDL_int');
    write_vec_extern(f, linsys_solver.Lnz,       strcat([prefix, 'linsys_solver_Lnz']),        'QDLDL_int');
    fprintf(f, strcat(['extern QDLDL_int   ', prefix, 'linsys_solver_iwork[%d];\n']), length(linsys_solver.iwork));
    fprintf(f, strcat(['extern QDLDL_bool  ', prefix, 'linsys_solver_bwork[%d];\n']), length(linsys_solver.bwork));
    fprintf(f, strcat(['extern QDLDL_float ', prefix, 'linsys_solver_fwork[%d];\n']), length(linsys_solver.fwork));
end

fprintf(f, strcat(['extern qdldl_solver ', prefix, 'linsys_solver;\n\n']));

end


function write_solution_src( f, n, m, prefix )
%WRITE_SOLUTION_SRC Preallocate solution vectors

fprintf(f, '// Define solution\n');
fprintf(f, strcat(['c_float ', prefix, 'xsolution[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'ysolution[%d];\n\n']), m);
fprintf(f, strcat(['OSQPSolution ', prefix, 'solution = {', prefix, 'xsolution, ', prefix, 'ysolution};\n\n']));

end

function write_solution_inc( f, n, m, prefix )
%WRITE_SOLUTION_INC Prototypes for solution vectors

fprintf(f, '// Prototypes for solution\n');
fprintf(f, strcat(['extern c_float ', prefix, 'xsolution[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'ysolution[%d];\n\n']), m);
fprintf(f, strcat(['extern OSQPSolution ', prefix, 'solution;\n\n']));

end


function write_info_src( f, prefix )
%WRITE_INFO_SRC Preallocate info structure

fprintf(f, '// Define info\n');
fprintf(f, strcat(['OSQPInfo ', prefix, 'info = {0, "Unsolved", OSQP_UNSOLVED, (c_float)0.0, (c_float)0.0, (c_float)0.0};\n\n']));

end

function write_info_inc( f, prefix )
%WRITE_INFO_INC Prototype for info structure

fprintf(f, '// Prototype for info structure\n');
fprintf(f, strcat(['extern OSQPInfo ', prefix, 'info;\n\n']));

end


function write_workspace_src( f, n, m, rho_vectors, embedded_flag, prefix )
%WRITE_WORKSPACE_SRC Preallocate workspace structure and populate rho_vectors

fprintf(f, '// Define workspace\n');
write_vec(f, rho_vectors.rho_vec,     strcat([prefix, 'work_rho_vec']),     'c_float');
write_vec(f, rho_vectors.rho_inv_vec, strcat([prefix, 'work_rho_inv_vec']), 'c_float');
if embedded_flag ~= 1
    write_vec(f, rho_vectors.constr_type, strcat([prefix, 'work_constr_type']), 'c_int');
end
fprintf(f, strcat(['c_float ', prefix, 'work_x[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_y[%d];\n']), m);
fprintf(f, strcat(['c_float ', prefix, 'work_z[%d];\n']), m);
fprintf(f, strcat(['c_float ', prefix, 'work_xz_tilde[%d];\n']), n+m);
fprintf(f, strcat(['c_float ', prefix, 'work_x_prev[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_z_prev[%d];\n']), m);
fprintf(f, strcat(['c_float ', prefix, 'work_Ax[%d];\n']), m);
fprintf(f, strcat(['c_float ', prefix, 'work_Px[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_Aty[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_delta_y[%d];\n']), m);
fprintf(f, strcat(['c_float ', prefix, 'work_Atdelta_y[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_delta_x[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_Pdelta_x[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_Adelta_x[%d];\n']), m);
fprintf(f, strcat(['c_float ', prefix, 'work_D_temp[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_D_temp_A[%d];\n']), n);
fprintf(f, strcat(['c_float ', prefix, 'work_E_temp[%d];\n\n']), m);

fprintf(f, strcat(['OSQPWorkspace ', prefix, 'workspace = {\n']));
fprintf(f, strcat(['&', prefix, 'data, (LinSysSolver *)&', prefix, 'linsys_solver,\n']));
fprintf(f, strcat([prefix, 'work_rho_vec, ', prefix, 'work_rho_inv_vec,\n']));
if embedded_flag ~= 1
    fprintf(f, strcat([prefix, 'work_constr_type,\n']));
end
fprintf(f, strcat([prefix, 'work_x,       ', prefix, 'work_y, ', prefix, 'work_z, ', prefix, 'work_xz_tilde,\n']));
fprintf(f, strcat([prefix, 'work_x_prev,  ', prefix, 'work_z_prev,\n']));
fprintf(f, strcat([prefix, 'work_Ax,      ', prefix, 'work_Px, ', prefix, 'work_Aty,\n']));
fprintf(f, strcat([prefix, 'work_delta_y, ', prefix, 'work_Atdelta_y,\n']));
fprintf(f, strcat([prefix, 'work_delta_x, ', prefix, 'work_Pdelta_x, ', prefix, 'work_Adelta_x,\n']));
fprintf(f, strcat([prefix, 'work_D_temp,  ', prefix, 'work_D_temp_A, ', prefix, 'work_E_temp,\n']));
fprintf(f, strcat(['&', prefix, 'settings, &', prefix, 'scaling, &', prefix, 'solution, &', prefix, 'info};\n\n']));

end

function write_workspace_inc( f, n, m, rho_vectors, embedded_flag, prefix )
%WRITE_WORKSPACE_INC Prototypes for the workspace structure and rho_vectors

fprintf(f, '// Prototypes for the workspace\n');
write_vec_extern(f, rho_vectors.rho_vec,     strcat([prefix, 'work_rho_vec']),     'c_float');
write_vec_extern(f, rho_vectors.rho_inv_vec, strcat([prefix, 'work_rho_inv_vec']), 'c_float');
if embedded_flag ~= 1
    write_vec_extern(f, rho_vectors.constr_type, strcat([prefix, 'work_constr_type']), 'c_int');
end
fprintf(f, strcat(['extern c_float ', prefix, 'work_x[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_y[%d];\n']), m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_z[%d];\n']), m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_xz_tilde[%d];\n']), n+m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_x_prev[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_z_prev[%d];\n']), m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_Ax[%d];\n']), m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_Px[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_Aty[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_delta_y[%d];\n']), m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_Atdelta_y[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_delta_x[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_Pdelta_x[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_Adelta_x[%d];\n']), m);
fprintf(f, strcat(['extern c_float ', prefix, 'work_D_temp[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_D_temp_A[%d];\n']), n);
fprintf(f, strcat(['extern c_float ', prefix, 'work_E_temp[%d];\n\n']), m);

fprintf(f, strcat(['extern OSQPWorkspace ', prefix, 'workspace;\n\n']));

end


function write_vec(f, vec, name, vec_type)
%WRITE_VEC Write vector to file.

fprintf(f, '%s %s[%d] = {\n', vec_type, name, length(vec));

% Write vector elements
for i = 1 : length(vec)
    if strcmp(vec_type, 'c_float')
        fprintf(f, '(c_float)%.20f,\n', vec(i));
    else
        fprintf(f, '%i,\n', vec(i));
    end
end
fprintf(f, '};\n');

end

function write_vec_const(f, vec, name, vec_type)
%WRITE_VEC Write vector to file.

fprintf(f, 'const %s %s[%d] = {\n', vec_type, name, length(vec));

% Write vector elements
for i = 1 : length(vec)
    if strcmp(vec_type, 'c_float')
        fprintf(f, '(c_float)%.20f,\n', vec(i));
    else
        fprintf(f, '%i,\n', vec(i));
    end
end
fprintf(f, '};\n');

end

function write_vec_extern(f, vec, name, vec_type)
%WRITE_VEC_EXTERN Write vector prototype to file.

fprintf(f, 'extern %s %s[%d];\n', vec_type, name, length(vec));

end


function write_mat(f, mat, name)
%WRITE_MAT Write matrix in CSC format to file.

write_vec(f, mat.i, [name, '_i'], 'c_int');
write_vec(f, mat.p, [name, '_p'], 'c_int');
write_vec(f, mat.x, [name, '_x'], 'c_float');

fprintf(f, 'csc %s = {', name);
fprintf(f, '%d, ', mat.nzmax);
fprintf(f, '%d, ', mat.m);
fprintf(f, '%d, ', mat.n);
fprintf(f, '%s_p, ', name);
fprintf(f, '%s_i, ', name);
fprintf(f, '%s_x, ', name);
fprintf(f, '%d};\n', mat.nz);

end

function write_mat_const(f, mat, name)
%WRITE_MAT_CONST Write matrix in CSC format to file.

write_vec_const(f, mat.i, [name, '_i'], 'c_int');
write_vec_const(f, mat.p, [name, '_p'], 'c_int');
write_vec_const(f, mat.x, [name, '_x'], 'c_float');

fprintf(f, 'csc %s = {', name);
fprintf(f, '%d, ', mat.nzmax);
fprintf(f, '%d, ', mat.m);
fprintf(f, '%d, ', mat.n);
fprintf(f, '(c_int*)%s_p, ', name);
fprintf(f, '(c_int*)%s_i, ', name);
fprintf(f, '(c_float*)%s_x, ', name);
fprintf(f, '%d};\n', mat.nz);

end

function write_mat_extern(f, mat, name)
%WRITE_MAT_EXTERN Write matrix the prototype for the matrix.

fprintf(f, 'extern csc %s;\n', name);

end
